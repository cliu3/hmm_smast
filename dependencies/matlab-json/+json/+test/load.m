function load
%LOAD Test json.load.

  fixtures = {...
    [],        'null';...
    1,         '1.0';...
    inf,       'Infinity';...
    -inf,      '-Infinity';...
    nan,       'NaN';...
    true,      'true';...
    'foo',     'foo';...
    {},        '[]';...
    struct(),  '{}';...
    1:5,       '[1,2,3,4,5]';...
    (1:5)',    '[[1],[2],[3],[4],[5]]';...
    [1,2;3,4], '[[1,2],[3,4]]';...
    cat(3,[1,2;3,4],[5,6;7,8]), '[[[1,2],[3,4]],[[5,6],[7,8]]]';...
    {{}},      '[[]]';...
    struct('a',[1,2]), '{"a":[1,2]}';...
    struct('a',struct('b',{1,2})), '{"a":[{"b":1},{"b":2}]}';...
    {'foo','bar','baz'}, '["foo","bar","baz"]';...
  };

  for i = 1:size(fixtures, 1)
    value = json.load(fixtures{i,2});
    if isa(value, class(fixtures{i, 1})) && ...
        isequalwithequalnans(value, fixtures{i,1})
      fprintf('PASS: fixture %g\n', i);
    else
      fprintf('FAIL: fixture %g: ''%s''.\n', i, fixtures{i,2});
    end
  end

end
